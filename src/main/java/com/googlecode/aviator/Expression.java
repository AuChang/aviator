/**
 *  Copyright (C) 2010 dennis zhuang (killme2008@gmail.com)
 *
 *  This library is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published
 *  by the Free Software Foundation; either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 **/
package com.googlecode.aviator;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;

import com.googlecode.aviator.exception.ExpressionRuntimeException;


/**
 * Compiled expression,encapsulate a java class generated by expression string
 * 
 * @author dennis
 * 
 */
public class Expression {
    private final Class<?> clazz;
    private final Method runMethod;


    public Expression(Class<?> clazz) throws NoSuchMethodException, SecurityException {
        super();
        this.clazz = clazz;
        this.runMethod = clazz.getDeclaredMethod("run", Map.class);
        this.runMethod.setAccessible(true);
    }


    /**
     * Execute expression with environment
     * 
     * @param env
     *            Binding variable environment
     * @return
     */
    public Object execute(Map<String, Object> env) {
        if (env == null) {
            env = AviatorEvaluator.functionMap;
        }
        else {
            env.putAll(AviatorEvaluator.functionMap);
        }
        try {
            return this.runMethod.invoke(null, env);
        }
        catch (InvocationTargetException e) {
            if (e.getCause() != null) {
                throw new ExpressionRuntimeException("Execute expression error", e.getCause());
            }
            else {
                throw new ExpressionRuntimeException("Execute expression error", e);
            }
        }
        catch (Throwable e) {
            throw new ExpressionRuntimeException("Execute expression error", e);
        }
    }


    /**
     * Execute expression with empty environment
     * 
     * @return
     */
    public Object execute() {
        return execute(null);
    }


    /**
     * Get generated java class
     * 
     * @return
     */
    public Class<?> getJavaClass() {
        return this.clazz;
    }
}
