#summary 用户指南 使用手册

= 简介 =

Aviator是一个高性能、轻量级的java语言实现的表达式求值引擎，主要用于各种表达式的动态求值。现在已经有很多开源可用的java表达式求值引擎，为什么还需要Avaitor呢？

Aviator的设计目标是*轻量级*和*高性能 *，相比于Groovy、JRuby的笨重，Aviator非常小，加上依赖包也才xxk；当然，Aviator的语法是受限的，它不是一门完整的语言，而只是语言的一小部分集合。

其次，Aviator的实现思路与其他轻量级的求值器很不相同，其他求值器一般都是通过解释的方式运行，而Aviator则是直接将表达式*编译成Java字节码*，交给JVM去执行。简单来说，Aviator的定位是介于Groovy这样的重量级脚本语言和IKExpression这样的轻量级表达式引擎之间。

= 特性 =

Aviator的特性

 * 支持大部分运算操作符，包括算术操作符、逻辑操作符、正则匹配操作符(=~)、三元表达式?: ，并且支持操作符的优先级和括号强制优先级，具体请看后面的操作符列表。

 * 支持正则表达式匹配，类似Ruby、Perl的匹配语法，并且支持类Ruby的$num指向匹配分组。

 * 自动类型转换，当执行操作的时候，会自动判断操作数类型并做相应转换，无法转换即抛异常。

 * 支持传入变量，支持类似a.b.c的嵌套变量访问。

 * 性能优秀

Aviator的限制：

 * 没有if else、do while等语句，仅支持逻辑表达式、算术表达式、三元表达式和正则匹配。

 * 不允许自定义函数

 * 不允许赋值语句

= 整体结构 =

Aviator的结构非常简单，一个典型的求值器的结构

[http://www.blogjava.net/images/blogjava_net/killme2008/aviator.jpg]


= 使用手册 =

== 数据类型 ==

 * Number类型：数字类型，支持两种类型，分别对应Java的Long和Double，也就是说任何整数都将被转换为Long，而任何浮点数都将被转换为Double，包括用户传入的数值也是如此转换。不支持科学计数法，仅支持十进制。如-1、100、2.3等。

 * String类型：  字符串类型，单引号或者双引号括起来的文本串，如'hello world' 

 * Bool类型：    常量true和false，表示真值和假值

 * Pattern类型： 类似Ruby、perl的正则表达式，以//括起来的字符串，如/\d+/

 * 变量类型：   与Java的变量命名规则相同，变量的值由用户传入，如a、_b等

 * nil类型:     常量nil,类似java中的null，但是nil比较特殊，nil不仅可以参与==、!=的比较，也可以参与>、>=、<、<=的比较，Aviator规定任何类型都nil大除了nil本身，nil==nil返回true。用户传入的变量值如果为null，那么也将作为nil处理。

== 操作符 ==

=== 算术运算符 ===


